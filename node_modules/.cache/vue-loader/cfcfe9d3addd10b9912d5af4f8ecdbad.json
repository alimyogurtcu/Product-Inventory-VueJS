{"remainingRequest":"C:\\Users\\alimy\\Desktop\\GitHub\\product-inventory.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\alimy\\Desktop\\GitHub\\product-inventory.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\alimy\\Desktop\\GitHub\\product-inventory.github.io\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\alimy\\Desktop\\GitHub\\product-inventory.github.io\\src\\components\\pages\\Profile.vue?vue&type=template&id=8f428144&scoped=true&","dependencies":[{"path":"C:\\Users\\alimy\\Desktop\\GitHub\\product-inventory.github.io\\src\\components\\pages\\Profile.vue","mtime":1632823299644},{"path":"C:\\Users\\alimy\\Desktop\\GitHub\\product-inventory.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1632772002606},{"path":"C:\\Users\\alimy\\Desktop\\GitHub\\product-inventory.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1632772005531},{"path":"C:\\Users\\alimy\\Desktop\\GitHub\\product-inventory.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1632772002606},{"path":"C:\\Users\\alimy\\Desktop\\GitHub\\product-inventory.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1632772004591}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}